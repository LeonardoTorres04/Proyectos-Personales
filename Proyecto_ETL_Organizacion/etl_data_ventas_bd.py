# -*- coding: utf-8 -*-
"""ETL_Data_Ventas_BD.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NLcUD3bMbTMe4w184ZwpZspt6m1jmfWM
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns


df_ventas = pd.read_csv('/content/Sales_data.csv',sep=';')
df_ventas

#Renombrar columnas de la tabla
df_ventas.rename(columns={'Date' : 'Fecha', 'Store ID': 'ID_Tienda', 'Product ID': 'ID_Producto', 'Category': 'Categoria',
                                      'Region' : 'Region', 'Inventory Level' : 'Inventario', 'Units Sold' : 'Unidades_Vendidas',
                                       'Units Ordered' : 'Unidades_Pedidas' , 'Price' : 'Precio', 'Discount' : 'Descuento',
                                        'Weather Condition' : 'Cond_Meteor', 'Promotion' : 'Promocion',
                                        'Competitor Pricing' : 'Precio_competencia', 'Seasonality' : 'Estacionalidad',
                                        'Epidemic' : 'Epidemia', 'Demand' : 'Demanda'}, inplace=True)
df_ventas.info()

#cambiar formato a tipo fecha
df_ventas['Fecha'] = pd.to_datetime(df_ventas['Fecha'], dayfirst=True)

#corregir datos de columna ID_Tienda
df_ventas['ID_Tienda'] = df_ventas['ID_Tienda'].replace('SO01', 'S001')
df_ventas['ID_Tienda'] = df_ventas['ID_Tienda'].replace('SI05', 'S005')
df_ventas['ID_Tienda'] = df_ventas['ID_Tienda'].replace('SO003', 'S003')
df_ventas['ID_Tienda'] = df_ventas['ID_Tienda'].replace('S0003', 'S003')



#Corregir datos de columna ID_Producto
df_ventas['ID_Producto'] = df_ventas['ID_Producto'].replace('P0007-', 'P0007')
df_ventas['ID_Producto'] = df_ventas['ID_Producto'].replace('P005', 'P0005')
df_ventas['ID_Producto'] = df_ventas['ID_Producto'].replace('PO004', 'P0004')
df_ventas

#Renombrar datos de la Columna Categoria
df_ventas['Categoria'] = df_ventas['Categoria'].replace('Electronics', 'Electronicos')
df_ventas['Categoria'] = df_ventas['Categoria'].replace('Clothing', 'Ropa')
df_ventas['Categoria'] = df_ventas['Categoria'].replace('Furniture', 'Muebles')
df_ventas['Categoria'] = df_ventas['Categoria'].replace('Toys', 'Juguetes')
df_ventas['Categoria'] = df_ventas['Categoria'].replace('Groceries', 'Comestibles')

#Renombrar datos de la columna Region
df_ventas['Region'] = df_ventas['Region'].replace('North', 'Norte')
df_ventas['Region'] = df_ventas['Region'].replace('South', 'Sur')
df_ventas['Region'] = df_ventas['Region'].replace('East', 'Este')
df_ventas['Region'] = df_ventas['Region'].replace('West', 'Oeste')

#Renombrar datos de la columna Cond_Meteor
df_ventas['Cond_Meteor'] = df_ventas['Cond_Meteor'].replace('Sunny', 'Soleado')
df_ventas['Cond_Meteor'] = df_ventas['Cond_Meteor'].replace('Cloudy', 'Nublado')
df_ventas['Cond_Meteor'] = df_ventas['Cond_Meteor'].replace('Rainy', 'Lluvioso')
df_ventas['Cond_Meteor'] = df_ventas['Cond_Meteor'].replace('Snowy', 'Nieve')

#Renombrar datos de la columna Estacionalidad
df_ventas['Estacionalidad'] = df_ventas['Estacionalidad'].replace('Winter', 'Invierno')
df_ventas['Estacionalidad'] = df_ventas['Estacionalidad'].replace('Summer', 'Verano')
df_ventas['Estacionalidad'] = df_ventas['Estacionalidad'].replace('Spring', 'Primavera')
df_ventas['Estacionalidad'] = df_ventas['Estacionalidad'].replace('Autumn', 'Otoño')

#Reemplazar datos de la columna Promocion
df_ventas['Promocion'] = df_ventas['Promocion'].replace(1, 'Si')
df_ventas['Promocion'] = df_ventas['Promocion'].replace(0, 'No')

#Reemplazar datos de la columna Epidemia
df_ventas['Epidemia'] = df_ventas['Epidemia'].replace(1, 'Si')
df_ventas['Epidemia'] = df_ventas['Epidemia'].replace(0, 'No')

#Reemplazar valor NaN por ceros(0)
df_ventas['Inventario'] = df_ventas['Inventario'].fillna(0).astype(int)
df_ventas['Unidades_Vendidas'] = df_ventas['Unidades_Vendidas'].fillna(0).astype(int)
df_ventas['Unidades_Pedidas'] = df_ventas['Unidades_Pedidas'].fillna(0).astype(int)
df_ventas['Descuento'] = df_ventas['Descuento'].fillna(0).astype(int)
df_ventas

#Corregir error de la columna Descuento y Promoción Si tiene descuento entonces promocion debe ser Si
df_ventas.loc[df_ventas['Descuento'] > 0, 'Promocion'] = 'Si'
df_ventas

df_ventas.info()

#guardar Base en un nuevo Excel
df_ventas.to_excel('Data_Ventas.xlsx', index=False)

df = pd.read_excel('/content/Data_Ventas.xlsx')
df

#estadisticas de Resumen
media = df.mean(numeric_only=True).round(2)
mediana = df.median(numeric_only=True).round(2)
moda = df.mode(numeric_only=True).iloc[0]

print('\n La media para los datos son: ')
print(media)
print('\n La mediana para los datos son: ')
print(mediana)
print('\n La moda para los datos son: ')
print(moda)

desv_estandar = df.std(numeric_only=True).round(2)
varianza = df.var(numeric_only=True).round(2)

print('\n La desviacion estandar para los datos son: ')
print(desv_estandar)
print('\n La varianza para los datos son: ')
print(varianza)

min = df.min(numeric_only=True).round(2)
max = df.max(numeric_only=True).round(2)

print('\n El valor minimo para los datos son: ')
print(min)
print('\n El valor maximo para los datos son: ')
print(max)

#agrupar por categoria y region y sumar las unidades vendidas
df.groupby(['Categoria', 'Region'])['Unidades_Vendidas'].sum()

#categoria mas vendida
df.groupby('Categoria')['Unidades_Pedidas'].sum()

"""**Deteccion de Variables atípicas**"""

# Cargar datos
df = pd.read_excel("/content/Data_Ventas.xlsx")

# Seleccionar solo columnas numéricas
columnas_numericas = df.select_dtypes(include='number').columns

# Diccionario para guardar el número de outliers por columna
outliers = {}

# Detectar outliers por el método IQR
for col in columnas_numericas:
    Q1 = df[col].quantile(0.25)
    Q3 = df[col].quantile(0.75)
    IQR = Q3 - Q1
    limite_inferior = Q1 - 1.5 * IQR
    limite_superior = Q3 + 1.5 * IQR
    cantidad_outliers = ((df[col] < limite_inferior) | (df[col] > limite_superior)).sum()
    outliers[col] = cantidad_outliers

# Mostrar resultados
for col, count in outliers.items():
    print(f"{col}: {count} valores atípicos detectados")

#Ajustar Outliers
def ajustar_outliers_iqr(df, column):
    Q1 = df[column].quantile(0.25)
    Q3 = df[column].quantile(0.75)
    IQR = Q3 - Q1
    lower = Q1 - 1.5 * IQR
    upper = Q3 + 1.5 * IQR
    # Recortar los valores extremos
    df[column] = df[column].clip(lower=lower, upper=upper)

# Aplicar la función a las columnas numéricas
columnas_con_outliers = [
    'Inventario', 'Unidades_Vendidas', 'Unidades_Pedidas',
    'Precio', 'Descuento', 'Precio_competencia', 'Demanda'
]

for col in columnas_con_outliers:
    ajustar_outliers_iqr(df, col)

# Verificar si se han eliminado los outliers
for col in columnas_con_outliers:
    Q1 = df[col].quantile(0.25)
    Q3 = df[col].quantile(0.75)
    IQR = Q3 - Q1
    lower = Q1 - 1.5 * IQR
    upper = Q3 + 1.5 * IQR
    outliers = ((df[col] < lower) | (df[col] > upper)).sum()
    print(f"{col}: {outliers} valores fuera del rango")

#muestra los outliers ajustados
print(df[columnas_con_outliers].describe())

#Guardar Base sin Outliers en un nuevo Excel
df.to_excel('Data_Ventas_Sin_Outliers.xlsx', index=False)

#1. Grafico para comparar los outliers antes y después del ajuste
df_original = pd.read_excel("/content/Data_Ventas.xlsx")

# Lista de columnas numéricas a visualizar
columnas = [
    'Inventario', 'Unidades_Vendidas', 'Unidades_Pedidas',
    'Precio', 'Descuento', 'Precio_competencia', 'Demanda'
]

# Crear figuras lado a lado para comparar
fig, axes = plt.subplots(nrows=len(columnas), ncols=2, figsize=(12, 4 * len(columnas)))

for i, col in enumerate(columnas):
    # Boxplot antes del ajuste
    sns.boxplot(data=df_original, x=col, ax=axes[i, 0], color="salmon")
    axes[i, 0].set_title(f"{col} (Antes del ajuste)")

    # Boxplot después del ajuste
    sns.boxplot(data=df, x=col, ax=axes[i, 1], color="lightgreen")
    axes[i, 1].set_title(f"{col} (Después del ajuste)")

plt.tight_layout()
plt.show()

#2. Agrupar ventas por mes

Ventas_Mensuales =df.groupby(df['Fecha'].dt.to_period('M'))['Unidades_Vendidas'].sum()

#Visualización
plt.figure(figsize=(14, 6))
Ventas_Mensuales.plot(kind='bar', color='skyblue')
plt.title('Ventas Mensuales', fontsize=16)
plt.xlabel('Mes', fontsize=12)
plt.ylabel('Total de Unidades Vendidas', fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

#3. Ventas por producto
Ventas_Producto = df.groupby('ID_Producto')['Unidades_Vendidas'].sum().sort_values(ascending=False)

Ventas_Producto.plot(kind='bar', color='lightgreen', figsize=(10, 5))
plt.title('Ventas por Producto')
plt.xlabel('Producto')
plt.ylabel('Monto')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#4. Graficar Correlación entre variables
plt.figure(figsize=(12, 8))
correlation_matrix = df.corr(numeric_only=True)
sns.heatmap(correlation_matrix, annot=True, fmt=".2f", cmap='coolwarm', square=True, cbar_kws={"shrink": .8})
plt.title('Matriz de Correlación')
plt.tight_layout()
plt.show()

#5. Histograma con KDE para cada variable
numeric_cols = df.select_dtypes(include=['number']).columns

plt.figure(figsize=(5 * len(numeric_cols), 4))

for i, col in enumerate(numeric_cols, 1):
    plt.subplot(1, len(numeric_cols), i)
    sns.histplot(df[col], bins=20, kde=True, color='steelblue')
    plt.title(f'Distribución de {col}')
    plt.xlabel(col)
    plt.ylabel('Frecuencia')

plt.tight_layout()
plt.show()

#6. grafico de barras de categoria más vendida
df.groupby('Categoria')['Unidades_Pedidas'].sum().plot(kind='bar', color=['red', 'blue', 'green', 'yellow','skyblue'])
plt.title('Unidades Pedidas por Categoria')
plt.xlabel('Categoria')
plt.ylabel('Unidades Pedidas')
plt.show()