# -*- coding: utf-8 -*-
"""Limpieza.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k-gK4R-5N1-dsvf4xjjGUFQ130jVjyDN
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import statistics as stats
import math as m
import sklearn as sk



df_Ejercicio2 = pd.read_excel("20250528_BD_ejercicio_Unidad2.xlsx", engine= "openpyxl")

df_Ejercicio2

df_Ejercicio2.columns

# Asegurar que las columnas numéricas estén convertidas
columnas_num = ["UNIDADES VENDIDAS", "INGRESOS", "GASTOS DE OPERACIÓN", "INVENTARIOS"]
for col in columnas_num:
    df_Ejercicio2[col] = pd.to_numeric(df_Ejercicio2[col], errors="coerce")

df_Ejercicio2.rename(columns= {"UNIDADES VENDIDAS":"UNIDADES_VENDIDAS","INGRESOS":"INGRESOS",
                               "GASTOS DE OPERACIÓN":"GASTOS_OP","INVENTARIOS":"INVENTARIOS"}, inplace=True)

df_Ejercicio2.info()

# Actualizar la lista de columnas numéricas para que coincidan con los nombres renombrados
columnas_nuevas = ["UNIDADES_VENDIDAS", "INGRESOS", "GASTOS_OP", "INVENTARIOS"]

# Agrupar por columnas categóricas y combinar valores numéricos (por ejemplo, sumando)
df_combinar = df_Ejercicio2.groupby(['ZONA', 'VENDEDOR'], as_index=False)[columnas_nuevas].sum()

# Mostrar el resultado
print(df_combinar.head())

# Guardar la nueva tabla combinada en un archivo Excel
df_combinar.to_excel("datos_combinados.xlsx", index=False)

#Contar cuantos registros duplicados tenia la base
df_Ejercicio2.groupby(['ZONA', 'VENDEDOR']).size().reset_index(name='FRECUENCIA')

#calcular el promedio de los datos combinados para las unidades vendidas
df_combinar.groupby(['ZONA', 'VENDEDOR'], as_index=False)[columnas_nuevas].mean()

#Redondear los valores del promedio calculado
df_resultado = df_combinar.groupby(['ZONA', 'VENDEDOR'], as_index=False)[columnas_nuevas].mean()
df_resultado[columnas_nuevas] = df_resultado[columnas_nuevas].round().astype(int)
print(df_resultado)

# Guardar la nueva tabla de promedios combinada en un archivo Excel
df_resultado.to_excel("promedio_datos_combinados.xlsx", index=False)

#Importar la nueva tabla datos_combinados para aplicar las medidas de resumen estadisticos
df_Medidas = pd.read_excel("datos_combinados.xlsx", engine= "openpyxl")

df_Medidas

# Calcular estadísticas resumen
est_resumen = df_Medidas.describe().astype(int)
media = df_Medidas.mean(numeric_only=True).astype(int)
mediana = df_Medidas.median(numeric_only=True).astype(int)


print("=== ESTADÍSTICAS RESUMEN ===")
print(est_resumen)
print("\n=== La media para los datos son ===")
print(media)
print("\n=== La mediana para los datos son ===")
print(mediana)

#quartiles = df_Medidas.quantile([0.25, 0.5, 0.75])
cuartiles = df_Medidas[columnas_nuevas].quantile([0.25, 0.5, 0.75]).astype(int)

std_values = df_Medidas[columnas_nuevas].std().astype(int)

print("\n=== Desviación estándar de las columnas numéricas ===")
print(std_values)
print("=== Los cuartiles de medidas son: ===")
print(cuartiles)

# Encontrar el vendedor con más ingresos por zona
top_ingresos = df_Medidas.loc[df_Medidas.groupby('ZONA')['INGRESOS'].idxmax()]
print("\n=== Vendedor con más ingresos por zona ===")
print(top_ingresos[['ZONA', 'VENDEDOR', 'INGRESOS']])

# Configuraciones de fondo y tamaño de letra para vizualizacion
sns.set(style="whitegrid")
plt.rcParams["axes.labelsize"] = 10

# 1. Histograma para cada variable numérica en df_Medidas
plt.figure(figsize=(12, 10))
for i, col in enumerate(columnas_nuevas):
    plt.subplot(2, 2, i+1)
    colores = ['skyblue', 'salmon', 'lightgreen', 'gold']
    sns.histplot(df_Medidas[col], bins=10, kde=True, color=colores[i])
    plt.title(f'Histograma de {col}')
plt.tight_layout()
plt.show()

# 2. Gráfico de barras: Unidades vendidas promedio por zona
plt.figure(figsize=(8, 6))
sns.barplot(data=df_Medidas, x='ZONA', y='UNIDADES_VENDIDAS', estimator='mean', errorbar=None, palette='Set2')
plt.title('Promedio de Unidades Vendidas por Zona')
plt.show()

# 3. Gráfico de dispersión: INGRESOS vs GASTOS DE OPERACIÓN
plt.figure(figsize=(8, 6))
sns.scatterplot(data=df_Medidas, x='GASTOS_OP', y='INGRESOS', hue='ZONA', palette='Set2')
plt.title('Gastos de Operación vs Ingresos por Zona')
plt.show()

# 4. Boxplot para comparar la distribución de INVENTARIOS por zona
plt.figure(figsize=(8, 6))
sns.boxplot(data=df_Medidas, x='ZONA', y='INVENTARIOS', palette='Set2')
plt.title('Distribución de Inventarios por Zona')
plt.show()

# 5. Gráfico de barras para el vendedor que más ingresos tuvo en cada zona
plt.figure(figsize=(8, 6))
sns.barplot(data=top_ingresos, x='ZONA', y='INGRESOS', hue='VENDEDOR', palette='Set2')
plt.title('Vendedor con Más Ingresos por Zona')
plt.xlabel('Zona')
plt.ylabel('Ingresos')
plt.legend(title='Vendedor')
plt.show()

# 6. Gráfico de líneas para mostrar la tendencia de ingresos a lo largo de las zonas
plt.figure(figsize=(10, 6))
sns.lineplot(data=df_Medidas, x='ZONA', y='INGRESOS', marker='o', palette='Set2')
plt.title('Tendencia de Ingresos a lo Largo de las Zonas')
plt.xlabel('Zona')
plt.ylabel('Ingresos')
plt.xticks(rotation=45)
plt.show()

# 7. Gráfico de calor para visualizar la correlación entre las variables numéricas
plt.figure(figsize=(10, 8))
correlation_matrix = df_Medidas[columnas_nuevas].corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', square=True, cbar_kws={"shrink": .8})
plt.title('Matriz de Correlación entre Variables Numéricas')
plt.show()

# 8. Gráfico de barras para comparar el inventario de cada vendedor por zona
plt.figure(figsize=(12, 6))
sns.barplot(data=df_Medidas, x='VENDEDOR', y='INVENTARIOS', hue='ZONA', palette='Set2')
plt.title('Inventario de Cada Vendedor por Zona')
plt.xlabel('Vendedor')
plt.ylabel('Inventarios')
plt.legend(title='Zona')
plt.show()

# 9. Grafica Histograma de la desviación estándar
plt.figure(figsize=(12, 10))
for i, col in enumerate(columnas_nuevas):
    plt.subplot(2, 2, i+1)
    sns.histplot(df_Medidas[col], bins=10, kde=True, color=colores[i])
    std = df_Medidas[col].std()
    mean = df_Medidas[col].mean()
    plt.axvline(mean, color='black', linestyle='--', label='Media')
    plt.axvline(mean + std, color='red', linestyle=':', label='+1 STD')
    plt.axvline(mean - std, color='red', linestyle=':', label='-1 STD')
    plt.title(f'Histograma de {col}\nDesviación estándar: {std:.0f}')
    plt.legend()
plt.tight_layout()
plt.show()

#10 Graficar UNIDADES_VENDIDAS vs INVENTARIOS y GASTOS_OP vs INGRESOS usando los cuartiles

fig, axes = plt.subplots(1, 2, figsize=(14, 6))

# UNIDADES_VENDIDAS vs INVENTARIOS
axes[0].scatter(df_Medidas['UNIDADES_VENDIDAS'], df_Medidas['INVENTARIOS'], color=colores[0], alpha=0.7)
axes[0].set_xlabel('UNIDADES_VENDIDAS')
axes[0].set_ylabel('INVENTARIOS')
axes[0].set_title('Unidades Vendidas vs Inventarios')

# Dibujar líneas de cuartiles
for q in cuartiles.index:
    axes[0].axvline(cuartiles.loc[q, 'UNIDADES_VENDIDAS'], color='red', linestyle='--', alpha=0.5)
    axes[0].axhline(cuartiles.loc[q, 'INVENTARIOS'], color='blue', linestyle='--', alpha=0.5)

# GASTOS_OP vs INGRESOS
axes[1].scatter(df_Medidas['GASTOS_OP'], df_Medidas['INGRESOS'], color=colores[1], alpha=0.7)
axes[1].set_xlabel('GASTOS_OP')
axes[1].set_ylabel('INGRESOS')
axes[1].set_title('Gastos de Operación vs Ingresos')

# Dibujar líneas de cuartiles
for q in cuartiles.index:
    axes[1].axvline(cuartiles.loc[q, 'GASTOS_OP'], color='red', linestyle='--', alpha=0.5)
    axes[1].axhline(cuartiles.loc[q, 'INGRESOS'], color='blue', linestyle='--', alpha=0.5)

plt.tight_layout()
plt.show()